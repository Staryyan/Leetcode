#include <algorithm>
#include <iostream>
#include <stack>
#include <vector>

using namespace std;

struct Vertex {
    int test;
    int sc;
    bool onStack;
    vector<int> succ;
    Vertex() : lowlink(-1), test(-1), sc(-1), onStack(false) {}
    int lowlink;

};

typedef vector<Vertex> Graph;

class Solution {
private:
    void strongConnect(Graph &g, int v, stack<int> &stk) {
        g[v].test = test;
        g[v].lowlink = test;
        ++test;
        g[v].onStack = true;
        stk.push(v);

        for (int w : g[v].succ) {
            if (g[w].test < 0) {
                strongConnect(g, w, stk);
                g[v].lowlink = min(g[v].lowlink, g[w].lowlink);
            } else if (g[w].onStack) {
                g[v].lowlink = min(g[v].lowlink, g[w].test);
            }
        }

        if (g[v].lowlink == g[v].test) {
            int w;
            g[v].sc = scn;
            do {
                w = stk.top();
                stk.pop();
                g[w].onStack = false;
                g[w].sc = scn;
            } while (w != v);
            ++scn;
        }
    }
  public:



    int count;
    int test;
    int scn;
    int minLeftMonsters(vector<vector<char>> m) {
        int n = m.size();
        Graph graph(n);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (m[i][j] == '-') {
                    graph[i].succ.push_back(j);
                }
            }
        }
        stack<int> stk;
        test = 0;
        scn = 0;
        for (int i = 0; i < n; ++i) {
            if (graph[i].test < 0) {
                strongConnect(graph, i, stk);
            }
        }
        vector<bool> result(scn, true);
        for (int i = 0; i < n; ++i) {
            for (int v : graph[i].succ) {
                if (graph[v].sc != graph[i].sc) {
                    result[graph[v].sc] = false;
                }
            }
        }
        int ret = 0;
        for (int i = 0; i < result.size(); ++i) {
            if (result[i]) {
                ++ret;
            }
        }
        return ret;
    }

};